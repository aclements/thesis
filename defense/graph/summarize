#!/usr/bin/python

import sys, re, shlex

class PointSet(object):
    def __init__(self, points):
        self.__points = points

    @classmethod
    def from_block_file(cls, fp):
        stack = []
        points = []

        for line in fp:
            line = line.strip()

            mh = re.match(r"(=+) (.*?) \1", line)
            if mh or line.startswith("# --"):
                level = len(mh.group(1)) if mh else len(stack)
                stack = stack[:level]
                while len(stack) < level:
                    stack.append({})
                stack.append(cls.__parse_map(mh.group(2) if mh else line[2:]))
                if not mh:
                    pointConf = {}
                    for conf in stack:
                        pointConf.update(conf)
                    points.append((pointConf, {}))
            elif line.startswith("#"):
                continue
            elif line:
                v, k = line.split(" ", 1)
                points[-1][1][k.strip()] = cls.__parse_atom(v.strip())

        return PointSet(points)

    @classmethod
    def __parse_map(cls, s):
        res = {}
        for tok in shlex.split(s, False, True):
            if "=" not in tok:
                tok += "=true"
            assert tok.startswith("--")
            k, v = tok[2:].split("=", 1)
            res[k] = cls.__parse_atom(v)
        return res

    @staticmethod
    def __parse_atom(s):
        ss = s.strip()
        if ss.isdigit():
            return int(s)
        try:
            return float(s)
        except ValueError:
            pass
        SIZEPOST = "KMGTPEZY"
        if ss[:-1].isdigit() and ss[-1] in SIZEPOST:
            mant = int(ss[:-1])
            shift = 10 + SIZEPOST.index(ss[-1]) * 10
            return mant << shift
        return s

    def update_config(self, xform):
        for p in self.__points:
            xform(p[0])

    @staticmethod
    def __pfunc(pred):
        if isinstance(pred, basestring):
            return lambda conf: conf[pred], pred
        return pred, "<func>"

    def filter(self, pred):
        pred, _ = self.__pfunc(pred)
        points = []
        for p in self.__points:
            if pred(p[0]):
                points.append(p)
        return PointSet(points)

    def groupby(self, pred):
        pred, _ = self.__pfunc(pred)
        sets = {}
        for p in self.__points:
            sets.setdefault(pred(p[0]), []).append(p)
        return dict((k, PointSet(points)) for k, points in sets.items())

    def autogroup(self, *ignore):
        """Group by full configuration, except for ignored keys.
        Yields a sequence of (conf, pointset) pairs where conf is the
        differentiating configuration."""
        # Find the configuration keys that differ between any points
        # and aren't ignored
        key_to_vals = {}
        for conf, _ in self.__points:
            for k, v in conf.iteritems():
                key_to_vals.setdefault(k, set()).add(v)
        diff_keys = set()
        for k, vs in key_to_vals.iteritems():
            if len(vs) > 1 and k not in ignore:
                diff_keys.add(k)

        # Group by these keys
        def diff_config(conf):
            return dict((k, conf[k]) for k in diff_keys)
        groups = self.groupby(lambda conf: tuple(sorted_items(diff_config(conf))))

        # Output the groups
        for conf, group in sorted_items(groups):
            yield (dict(conf), group)

    def graph(self, x, *ys):
        x, xname = self.__pfunc(x)
        ys = map(self.__pfunc, ys)
        print "#", xname, " ".join(name for _, name in ys)
        for p in self.__points:
            print x(p[0]), " ".join(str(y(p[1])) for y, _ in ys)

def avg(lst):
    return float(sum(lst))/len(lst)

def sorted_items(dct):
    for k in sorted(dct.iterkeys()):
        yield k, dct[k]

def core_set_to_ncores(config):
    cores = set()
    for part in str(config["cores"]).split(","):
        if '-' in part:
            lo, hi = part.split("-")
            cores.update(range(int(lo), int(hi) + 1))
        else:
            cores.add(int(part))
    config["ncores"] = len(cores)


def graph_generic(cols, ignore, sortby):
    groups = list(data.autogroup(*(cols + ignore)))
    for sortkey in reversed(sortby):
        if sortkey in groups[0][0]:
            groups.sort(key = lambda (conf, _): conf[sortkey])
    for conf, points in groups:
        # Generate this curve's name
        name = []
        for key in sortby:
            if key in conf:
                name.append((key, conf[key]))
                del conf[key]
        name.extend(conf.items())
        sname = " ".join("%s=%s" % (k,v) for k,v in name)

        print "#", sname
        points.graph(*cols)
        print
        print

def ops_vs_size():
    # plot --logscale='x 2' --format\ x="'%.0s %cb'"
    graph_generic(cols = ["size", "cycles/op", "ops/sec"],
                  ignore = ["cores"],
                  sortby = ["op", "ncores"])

def ops_vs_ncores():
    graph_generic(cols = ["ncores", "cycles/op", "ops/sec"],
                  ignore = ["cores"],
                  sortby = ["op", "size"])

data = PointSet.from_block_file(sys.stdin)
data.update_config(core_set_to_ncores)

#data = data.filter(lambda conf: conf["op"] == "read")

globals()[sys.argv[1]]()
