from __future__ import print_function

__all__ = ["generate"]

import sys, re, time, types

def copy_code(code_obj, **kwargs):
    "Make a copy of a code object, maybe changing some attributes"
    CODE_ARGS = ('argcount', 'nlocals', 'stacksize', 'flags', 'code',
                 'consts', 'names', 'varnames', 'filename', 'name',
                 'firstlineno', 'lnotab', 'freevars', 'cellvars')
    for arg in CODE_ARGS:
        if arg not in kwargs:
            kwargs[arg] = getattr(code_obj, 'co_%s' % arg)
    return types.CodeType(*map(kwargs.__getitem__, CODE_ARGS))

def eval_TeX(paths, globals):
    for path in paths:
        if path == "pyexpr.tex": continue
        text = file(path).read()
        for m in re.finditer(r"\\pyexpr\{([^}]*)\}", text):
            lineno = text.count("\n", 0, m.start(1)) + 1
            try:
                code = compile(m.group(1), path, 'eval')
            except SyntaxError, e:
                if e.filename == path:
                    e.lineno += lineno - 1
                raise e
            code = copy_code(code, firstlineno = lineno)
            res = eval(code, globals, {})
            if isinstance(res, (int, long)):
                res = format(res, ",d")
            if isinstance(res, float):
                res = "{0:.2f}".format(res)
            print("\\defpyexpr{%s}{%s}" % (m.group(1), res))

def generate(tex_files, globals):
    """Output TeX definitions for the Python expressions found in
    tex_files and evaluated with the given globals dictionary."""

    print("%% Automatically generated by %s on %s" % (sys.argv[0],
                                                      time.asctime()))
    print(r"""
    \def\defpyexpr#1#2{\expandafter\def\csname pyexpr:#1\endcsname{#2\xspace}}
    \def\pyexpr#1{%
      \expandafter\ifx \csname pyexpr:#1\endcsname\relax%
      \PackageError{paper}{\noexpand\pyexpr{#1} undefined}{}%
      \else\csname pyexpr:#1\endcsname\fi}
    """)
    eval_TeX(tex_files, globals)
