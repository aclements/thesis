#!/usr/bin/env python

# PYTHONPATH=$HOME/r/commuter:$PYTHONPATH

import sys
import os
import argparse

import simsym
from simsym import SchedNode
from models.rename import Rename
import graph
import collections

import tools.context as context

def struct_to_dict(struct):
    return {arg: getattr(struct, arg).copy() for arg in struct._fields}

def test(base, callA, callB):
    s0 = base.var('s0')
    argsA = callA.arg_struct_type.var('a')
    argsB = callB.arg_struct_type.var('b')

    simsym.note({'type':'begin', 'region':'sAB'})
    sAB = s0.copy()
    simsym.note({'type':'begin', 'region':'opA'})
    rA = callA(sAB, **struct_to_dict(argsA))
    simsym.note({'type':'end',   'region':'opA', 'result':rA})
    simsym.note({'type':'begin', 'region':'opB'})
    rAB = callB(sAB, **struct_to_dict(argsB))
    simsym.note({'type':'end',   'region':'opB', 'result':rAB})
    simsym.note({'type':'end',   'region':'sAB'})

    simsym.note({'type':'begin', 'region':'sBA'})
    sBA = s0.copy()
    simsym.note({'type':'begin', 'region':'opB'})
    rB = callB(sBA, **struct_to_dict(argsB))
    simsym.note({'type':'end',   'region':'opB', 'result':rB})
    simsym.note({'type':'begin', 'region':'opA'})
    rBA = callA(sBA, **struct_to_dict(argsA))
    simsym.note({'type':'end',   'region':'opA', 'result':rBA})
    simsym.note({'type':'end',   'region':'sBA'})

    if rB != rAB:
        return 'RB'
    if rA != rBA:
        return 'RA'
    if not sAB == sBA:          # Render commutative branch as True
        return 'S'
    return 'C'

class TreeNode(object):
    def __init__(self):
        self.typ = self.val = self.band = self.region = None
        self.x, self.y = None, None
        self.children = {}

    def set(self, typ, val, region, frames):
        if self.typ is not None:
            assert self.typ == typ
            return
        self.typ = typ
        self.val = val
        self.region = tuple(region)
        self.band = tuple(region) + tuple((f.filename, f.lineno) for f in frames)

    def dump(self, indent=0, label=''):
        if label:
            label += ':'
        print "%s%s%s (band %s)" % (" "*indent, label, self.val, self.band)
        for clabel, child in node.children.items():
            child.dump(indent + 2, clabel)

class SchedTree(object):
    def __init__(self):
        self.__root = TreeNode()

    def add_sched(self, sched, result):
        node = self.__root
        region = []
        for snode in sched:
            if snode.typ == "note":
                if snode.val['type'] == 'begin':
                    region.append(snode.val['region'])
                elif snode.val['type'] == 'end':
                    if 'result' in snode.val:
                        node.set('end', snode, region, snode.frames)
                        node = node.children.setdefault('', TreeNode())
                    if snode.val['region'] != region[-1]:
                        raise ValueError('Unbalanced note regions')
                    region.pop()
                continue

            if snode.typ not in ("branch_det", "branch_nondet"):
                continue
            if (snode.typ == "branch_det" and
                os.path.basename(snode.frames[0].filename) == "symtypes.py"):
                # This introduces a bunch of extra deterministic
                # branches that distract from the main code, so just
                # strip them out.
                continue

            # SchedNodes are edges, but we want to label tree nodes by
            # the metadata on their outgoing edges (which will be the
            # same for both), so here we record information based on
            # the first SchedNode going out of a tree node we find.
            node.set('branch', snode, region, snode.frames)
            clabel = str(snode.val)[0]
            node = node.children.setdefault(clabel, TreeNode())
        assert region == []
        assert node.val is None
        node.set('result', result, [], [])

    def dump(self):
        self.__root.dump()

    def __apply_rec(self, fn, node=None, *args):
        if node is None:
            node = self.__root
        fn(node, *args)
        for child in node.children.values():
            self.__apply_rec(fn, child, *args)

    def layout(self, orientation):
        apply_rec = self.__apply_rec
        # Compute band order using a topo sort over bands
        # XXX This can't handle genuine loops, since they will cause
        # the same stack to appear repeatedly.  We should handle
        # these, even though it will necessarily be ambiguous.
        band_to_nodes = collections.defaultdict(list)
        def map_band(node):
            if node.band is not None:
                band_to_nodes[node.band].append(node)
        apply_rec(map_band)

        band_marks = {}
        band_order = []
        def visit_band(band):
            if band in band_marks:
                if band_marks[band] == 'temp':
                    raise ValueError("Cyclic band %r" % (band,))
                return
            band_marks[band] = 'temp'
            for node in band_to_nodes[band]:
                for child in node.children.values():
                    visit_band(child.band)
            band_marks[band] = True
            band_order.append(band)
        visit_band(self.__root.band)
        band_order.reverse()

        # Turn bands into Y coordinates
        def assign_y(py, node):
            if not node.band:
                # This should only happen in the final result node
                y = py + 1
                assert not node.children, \
                    'Band-less interior nodes not implemented'
            else:
                y = band_order.index(node.band)
            node.y = y
            for child in node.children.values():
                assign_y(y, child)
        assign_y(-1, self.__root)

        # Compute X coordinates from the bottom up (XXX could be way
        # more efficient, perhaps using deltas instead of absolutes)
        def shift(node, by):
            # Shift node right by 'by'
            node.x += by
        def hspans(ytop, subtree):
            # Compute the horizontal span at each Y, plus a stem going
            # from subtree up to ytop.
            minx, maxx = {}, {}
            def add_xy(x, y):
                if y in minx:
                    minx[y] = min(minx[y], x)
                    maxx[y] = max(maxx[y], x)
                else:
                    minx[y] = maxx[y] = x
            def hspan1(py, node):
                for y in range(py, node.y+1):
                    add_xy(node.x, y)
                for child in node.children.values():
                    hspan1(node.y, child)
            hspan1(ytop, subtree)
            return minx, maxx
        def overlap(ytop, sub1, sub2):
            # Compute the amount to shift sub2 to eliminate overlap with sub1
            _, sub1r = hspans(ytop, sub1)
            sub2l, _ = hspans(ytop, sub2)
            return 1 + max(sub1r[y] - sub2l[y] for y in sub1r if y in sub2l)
        def assign_x(node):
            if not node.children:
                node.x = 0.0
                return
            prev_child = None
            for child in node.children.values():
                assign_x(child)
                if prev_child is not None:
                    apply_rec(shift, child, overlap(node.y, prev_child, child))
                prev_child = child
            node.x = (sum(child.x for child in node.children.values()) /
                      len(node.children))
        assign_x(self.__root)

        # Current orientation: forks split on the X axis with ordered
        # from true to false; time increases on the Y axis.  Re-layout
        # in to desired orientation.
        def reorient_px_my(node):
            node.x, node.y = node.y, node.x
        if orientation == '+y-x':
            self.__edge_order = 'HV'
        elif orientation == '+x-y':
            apply_rec(reorient_px_my)
            self.__edge_order = 'VH'
        else:
            raise NotImplementedError('Orientation %s' % (orientation,))

    def to_ctx(self, ctx, S, orientation='+y-x', region_label_pt=None):
        """Draw self to ctx.  S is the unit size of the node grid.

        orientation is a string of the form '[+-][xy][+-][xy]' where
        the first two characters give the direction of increasing time
        and the second two give the direction of increasing truth.
        """
        self.layout(orientation)

        NODE_RADIUS = S * 0.1
        LABEL_PAD = S * 0.1
        STROKE_WIDTH = S * 0.02
        NODE_LABEL_SIZE = 5 * S / 13.0    # 5pt at S=13
        BRANCH_LABEL_SIZE = 5 * S / 13.0  # 5pt at S=13
        REGION_LABEL_SIZE = region_label_pt or (11 * S / 13.0) # 11pt at S=13

        # XXX Should this include line number labels for each
        # individual band?

        # Render regions
        with ctx:
            ctx.font_size = REGION_LABEL_SIZE
            self.__render_regions(ctx, S)

        # Render tree edges
        path = []
        def render_edges(node, move):
            for label, child in node.children.items():
                if label:
                    c = (cmp(child.x, node.x), cmp(child.y, node.y))
                    if c in ((0, 1), (1, 0), (1, 1)):
                        # Label below-right
                        ctx.text(label, S*node.x + LABEL_PAD,
                                 S*node.y + LABEL_PAD, 'tl')
                    elif c in ((-1, 1),):
                        # Label below-left
                        ctx.text(label, S*node.x - LABEL_PAD,
                                 S*node.y + LABEL_PAD, 'tr')
                    elif c in ((1, -1),):
                        # Label above-right
                        ctx.text(label, S*node.x + LABEL_PAD,
                                 S*node.y - LABEL_PAD, 'bl')
                    else:
                        raise NotImplementedError(
                            'Label for edge direction %s' % (c,))

                if move:
                    path.append(('M', S*node.x, S*node.y))
                if self.__edge_order == 'HV':
                    path.extend([('H', S*child.x), ('V', S*child.y)])
                else:
                    path.extend([('V', S*child.y), ('H', S*child.x)])
                move = True
                render_edges(child, False)
        # Stem to the root
        if self.__edge_order == 'HV':
            path.append(('M', S*self.__root.x, S*(self.__root.y - 1)))
            path.append(('V', S*self.__root.y))
        else:
            path.append(('M', S*(self.__root.x - 1), S*self.__root.y))
            path.append(('H', S*self.__root.x))
        with ctx:
            ctx.font_size = BRANCH_LABEL_SIZE
            render_edges(self.__root, False)
        ctx.path(path, stroke=(0,0,0), stroke_width=STROKE_WIDTH)

        # Render tree nodes
        def render_node(node):
            if node.typ == 'result':
                assert isinstance(node.val, simsym.SymbolicApplyResult)
                if node.val.value == 'C':
                    if isinstance(ctx, context.TikZ):
                        label = '$\\checkmark$'
                    else:
                        label = u'\u2713'
                    fill = (0,0.8,0)
                elif node.val.value in ('RA', 'RB', 'S'):
                    label = node.val.value[0]
                    fill = (1,0,0)
                ctx.circle(S*node.x, S*node.y, S * 0.33, fill=fill)
                ctx.text(label, S*node.x, S*node.y, 'cm', fill=(1,1,1))
            elif node.typ == 'end':
                assert isinstance(node.val, simsym.SchedNode)
                note = node.val.val
                ctx.rect(S*node.x - S*0.33, S*node.y - S*0.33,
                         S*0.66, S*0.66, fill=(1,1,1), stroke=(0,0,0),
                         stroke_width=STROKE_WIDTH)
                ctx.text(unicode(note['result']), S*node.x, S*node.y, 'cm')
            elif node.typ == 'branch':
                assert isinstance(node.val, simsym.SchedNode)
                ctx.circle(S*node.x, S*node.y, NODE_RADIUS, fill=(0,0,0))
            else:
                raise ValueError('Unknown TreeNode type %r' % node.typ)
        with ctx:
            ctx.font_size = NODE_LABEL_SIZE
            self.__apply_rec(render_node)

    def __render_regions(self, ctx, S):
        GAP = S * 1.5        # Gap between tree and region labels
        LINE_SKIP = S * 1.2     # Distance between region layer baselines

        if self.__edge_order == 'HV':
            # Get time, get fork
            gett, getf = (lambda n: n.y), (lambda n: n.x)
        else:
            gett, getf = (lambda n: n.x), (lambda n: n.y)

        # Compute region bounds
        regions, sides, unique_regions = {}, [None, None], set()
        def find_regions(node):
            if node.region:
                unique_regions.add(node.region)
            for i in range(1, len(node.region) + 1):
                region = node.region[:i]
                bounds = regions.get(region)
                if bounds is None:
                    regions[region] = (gett(node) - 1, gett(node))
                else:
                    regions[region] = (min(gett(node) - 1, bounds[0]),
                                       max(gett(node), bounds[1]))
            if sides[0] is None:
                sides[0] = sides[1] = getf(node)
            else:
                sides[0], sides[1] \
                    = min(getf(node), sides[0]), max(getf(node), sides[1])
        self.__apply_rec(find_regions)
        max_len = max(map(len, unique_regions))
        left = sides[0] * S - GAP - max_len * LINE_SKIP

        # Generate region colors
        def parse_rgb(x):
            return tuple(int(x[a:a+2],16)/255.0 for a in range(1,6,2))
        def inter(a, b, v):
            return tuple(ax * (1 - v) + bx * v for ax, bx in zip(a, b))
        region_colors = [inter(parse_rgb("#8ae234"), parse_rgb("#729fcf"),
                               float(x)/(len(unique_regions) - 1))
                         for x in range(len(unique_regions))]
        # Blend toward white
        region_colors = [inter(c, (1,1,1), 0.75) for c in region_colors]

        # Render region backgrounds
        for i, k in enumerate(sorted(unique_regions,
                                     key=lambda r:regions[r][0])):
            region = regions[k]
            if self.__edge_order == 'HV':
                ctx.rect((sides[0] - 0.5) * S, region[0] * S,
                         (sides[1] - sides[0] + 1) * S,
                         (region[1] - region[0]) * S,
                         fill=region_colors[i])
            else:
                ctx.rect(region[0] * S, (sides[0] - 0.5) * S,
                         (region[1] - region[0]) * S,
                         (sides[1] - sides[0] + 1) * S,
                         fill=region_colors[i])

        # Render separating lines
        lines = {}
        for label, (t, b) in regions.items():
            for y in (t, b):
                lines[y] = min(lines.get(y, 0), left + len(label) * LINE_SKIP)
        for y, x in lines.items():
            y *= S
            if self.__edge_order == 'VH':
                x, y = y, x
            ctx.path([('M', x, y), (self.__edge_order[0], (sides[1]+0.5)*S)],
                     stroke=(0,0,0,0.3), stroke_width=S*0.08)

        # Render region labels
        for label, (t, b) in regions.items():
            x = left + len(label) * LINE_SKIP
            if self.__edge_order == 'HV':
                ctx.text(label[-1], x, (t + b) / 2.0 * S, 'bm',
                         rotate=270)
            else:
                ctx.text(label[-1], (t + b) / 2.0 * S, x, 'tm')

argparser = argparse.ArgumentParser()
group = argparser.add_mutually_exclusive_group(required=True)
group.add_argument('--svg', action='store_true')
group.add_argument('--tex', action='store_true')
args = argparser.parse_args()

# Don't turn trivial state equality tests into concrete branches,
# since this makes some of the places where we hit the state equality
# test disappear from the execution tree.
simsym.options.eq_eliminate_structural = False
tree = SchedTree()
for sar in simsym.symbolic_apply(test, Rename, Rename.rename, Rename.rename):
    tree.add_sched(sar._SymbolicApplyResult__schedule, sar)
    if sar.value == 'C':
        print >>sys.stderr, simsym.simplify(sar.path_condition)
        print >>sys.stderr

orientation = '+x-y'
if args.svg:
    ctx = context.SVG(**{'font-family': 'Open Sans',
    #                     'font-weight': '300'
                     })
    tree.to_ctx(ctx, S=30, orientation=orientation)

if args.tex:
    ctx = context.TikZ()
    # Note: With orientation '-y+x', S=13 is just shy of 6" wide
    tree.to_ctx(ctx, S=18, orientation=orientation,
                region_label_pt=11)

ctx.write_to(sys.stdout)
