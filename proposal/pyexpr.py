import sys, re, time, json, types, glob

#
# Data from const.json
#

const = json.load(file("const.json"))

#
# Throughput Data from microbenchmarks in loops/per-second
#

def microbench_data(fname):
    d = {}
    for l in open('data/'+fname+'.data'):
        if l.startswith("#"):
            continue
        s=l.split()
        d[int(s[0])]=1000000.0*float(s[2])/float(s[1])
    return d;

#linuxMapbench = microbench_data('mapbench-linux')
#xv6Mapbench = microbench_data('mapbench-xv6')
#linuxDirbench = microbench_data('dirbench-linux')
#xv6Dirbench = microbench_data('dirbench-xv6')
#linuxFilebench = microbench_data('filebench-linux')
#xv6Filebench = microbench_data('filebench-xv6')

def fmt_float(f):
    return float('{0:.2f}'.format(f))

#
# mscan results for microbenchmarks
#

mscan = dict((f[5:-6], json.load(file(f))["scope-summary"])
             for f in glob.glob("data/*.mscan"))

def ncommute(experiment, commutes):
    if commutes:
        return (mscan[experiment]["logically unshared/physically unshared"]
                + mscan[experiment]["logically unshared/physically shared"])
    else:
        return mscan[experiment]["logically shared  /physically shared"]

#
# TeX processing
#

def copy_code(code_obj, **kwargs):
    "Make a copy of a code object, maybe changing some attributes"
    CODE_ARGS = ('argcount', 'nlocals', 'stacksize', 'flags', 'code',
                 'consts', 'names', 'varnames', 'filename', 'name',
                 'firstlineno', 'lnotab', 'freevars', 'cellvars')
    for arg in CODE_ARGS:
        if arg not in kwargs:
            kwargs[arg] = getattr(code_obj, 'co_%s' % arg)
    return types.CodeType(*map(kwargs.__getitem__, CODE_ARGS))

def eval_TeX(paths):
    for path in paths:
        if path == "pyexpr.tex": continue
        text = file(path).read()
        for m in re.finditer(r"\\pyexpr\{([^}]*)\}", text):
            lineno = text.count("\n", 0, m.start(1)) + 1
            try:
                code = compile(m.group(1), path, 'eval')
            except SyntaxError, e:
                if e.filename == path:
                    e.lineno += lineno - 1
                raise e
            code = copy_code(code, firstlineno = lineno)
            res = eval(code, globals(), {})
            if isinstance(res, (int, long)):
                res = format(res, ",d")
            print "\\defpyexpr{%s}{%s}" % (m.group(1), res)

print "%% Automatically generated by %s on %s" % (sys.argv[0], time.asctime())
print r"""
\def\defpyexpr#1#2{\expandafter\def\csname pyexpr:#1\endcsname{#2\xspace}}
\def\pyexpr#1{%
  \expandafter\ifx \csname pyexpr:#1\endcsname\relax%
  \PackageError{paper}{\noexpand\pyexpr{#1} undefined}{}%
  \else\csname pyexpr:#1\endcsname\fi}
"""
eval_TeX(sys.argv[1:])
